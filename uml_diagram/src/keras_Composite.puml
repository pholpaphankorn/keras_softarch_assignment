@startuml

title layers/core/

class Layer {
    +build(input_shape)
    +call(inputs, *args, **kwargs)
    +compute_output_shape(input_shape)
    -_set_training_mode(args, kwargs, call_context)
    -supports_masking: boolean
    -_trainable
    -_stateful
    +built
} 

class Model extends Layer{
    +__new__(cls, *args, **kwargs)
    +__setattr__(name, value)
    +build(input_shape)
    +call(inputs, training, mask)
    +inputs
    +outputs
    +stop_training
    -_training_state
    -_steps_per_execution
}

class Dense_Layer extends Layer {
    +build(input_shape)
    +call(inputs)
    +units: int
    +use_bias
    +supports_masking
}

class RNN_Layer extends Layer {
    +build(input_shape)
    +call(inputs, mask, training, initial_state, constants)
    -_trackable_saved_model_saver()
    +cell
    +stateful
    +unroll
    -_states
}

class Conv_Layer extends Layer {
    -_validate_init()
    +build(input_shape)
    +call(inputs)
    +filters: int
    +kernel_size: tuple[int]
    +use_bias
    +data_format: String
}

class Functional extends Model {
    +input()
    +output()
    -_layer_checkpoint_dependencies()
    +handle_deferred_layer_dependencies(layers)
    +call(inputs, training, mask)
    -_validate_graph_inputs_and_outputs()
    -_insert_layers(layers, relevant_nodes)
    +skip_init: boolean
}

class Sequential extends Functional {
    +layers()
    +pop()
    +build(input_shape)
    +add(layer)
    +call(inputs, training, mask)
    +clear_previously_created_nodes(layer, created_nodes)
    +track_nodes_created_by_last_call(layer, created_nodes)
    +supports_masking
    -_compute_output_and_mask_jointly
    -_input_dtype
}






@enduml