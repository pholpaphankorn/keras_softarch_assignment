@startuml

title Keras - Composite

+class Layer {
    +build(input_shape:TensorShape):void
    +call(inputs: list[Tensor],...): Tensor
    #_trainable: boolean
    #_stateful: boolean
} 

+class Model {
    +build(input_shape: TensorShape): void
    +call(inputs: list[Tensor], ...): Tensor
    +inputs:list[Tensor]
    +outputs:list[Tensor]
}

+class Dense extends Layer {
    +build(input_shape:list[int]): void
    +call(inputs:list[Tensor])
    +units: int
    +use_bias: boolean
    +supports_masking: boolean
}

+class RNN {
    +build(input_shape:list[int])
    +call(inputs:list[Tensor], ...)
    +stateful: boolean
}
+class client{

}
+abstract class Conv {
    +build(input_shape:list[int])
    +call(inputs:list[Tensor])
    +filters: int
    +kernel_size: tuple[int]
    +use_bias: boolean
    +data_format: String
}
+class Conv1D extends Conv{
    
}
+class Conv2D extends Conv{

}
+class Conv3D extends Conv{
    
}

+class Functional {
    #_self_tracked_trackables:list[Layer]
    +input(): list[Tensor]
    +output(): list[Tensor]
    +call(inputs:list[Tensor],...)
    +skip_init: boolean
}

+class Sequential extends Functional {
    +add(layer: Layer): void
    +pop(): void
    +build(input_shape:list[int])
    +call(inputs:list[Tensor],...)
    +supports_masking: boolean
    #_created_nodes: set

}

Sequential .left.> Layer : use
Functional -right-> Layer
Functional -up-|> Model
Model -right-|> Layer
client --> Layer
Conv -up-|> Layer
RNN -left-|> Layer




@enduml
